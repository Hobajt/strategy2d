cmake_minimum_required(VERSION 3.16)

#######################

option(ENGINE_ENABLE_LOGGING "Enables logging (writes to stderr)." ON)
option(ENGINE_ENABLE_ASSERTS "Enables custom assertion checks." ON)
option(ENGINE_ENABLE_GUI "Enables debugging GUI." ON)

#######################

set(VENDOR_DIR "${CMAKE_SOURCE_DIR}/vendor")

#generate config file
configure_file("engine_config.h.in" "include/engine/utils/engine_config.h" @ONLY)


add_library(${LIB_NAME}
"include/engine/engine.h" "include/engine/utils/setup.h" "include/engine/utils/log.h" "src/log.cpp" "include/engine/utils/mathdefs.h" "src/mathdefs.cpp"
"include/engine/core/window.h" "src/window.cpp" "include/engine/utils/gl_error.h" "src/gl_error.cpp"  "include/engine/utils/dbg_gui.h" "src/dbg_gui.cpp"
"include/engine/core/input.h" "src/input.cpp" "include/engine/core/renderer.h" "src/renderer.cpp" "include/engine/core/quad.h" "src/quad.cpp"
"include/engine/core/texture.h" "src/texture.cpp" "src/stb_image.cpp" "include/engine/core/shader.h" "src/shader.cpp" 
"include/engine/core/framebuffer.h" "src/framebuffer.cpp" "include/engine/core/text.h" "src/text.cpp" "include/engine/utils/utils.h" "src/utils.cpp"
"include/engine/core/audio.h" "src/audio.cpp" "src/miniaudio.cpp" "include/engine/game/camera.h" "src/camera.cpp" "include/engine/game/app.h" "src/app.cpp"
"include/engine/core/gui.h" "src/gui.cpp" "include/engine/core/selection.h" "src/selection.cpp" "include/engine/utils/generator.h" "src/generator.cpp"
"include/engine/core/sprite.h" "src/sprite.cpp" "include/engine/utils/json.h" "src/json.cpp" "include/engine/core/animator.h" "src/animator.cpp")

#==== library's include dir & config file generated by cmake ====
target_include_directories(${LIB_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")
target_include_directories(${LIB_NAME} PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/include")

#==== Glad ====
set(GLAD_DIR "${VENDOR_DIR}/glad")
target_include_directories(${LIB_NAME} PUBLIC "${GLAD_DIR}/include")
target_sources(${LIB_NAME} PRIVATE "${GLAD_DIR}/src/glad.cpp")

#==== GLFW ====
if(BUILD_GLFW_FROM_SOURCE)
    message(STATUS "===GLFW from source===")
    set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    add_subdirectory("${VENDOR_DIR}/glfw" "vendor/glfw")
else()
    message(STATUS "===GLFW from install===")
    find_package(glfw3 3.3 REQUIRED)
endif()
target_link_libraries(${LIB_NAME} glfw)

#==== GLM ====
target_include_directories(${LIB_NAME} PUBLIC "${VENDOR_DIR}/glm/include")

#==== stb_image ====
target_include_directories(${LIB_NAME} PUBLIC "${VENDOR_DIR}/stb_image/include")

#==== imgui ====
set(IMGUI_DIR "${VENDOR_DIR}/imgui")
target_include_directories(${LIB_NAME} PUBLIC "${IMGUI_DIR}/include")
target_sources(${LIB_NAME} PRIVATE 
    "${IMGUI_DIR}/src/imgui.cpp" "${IMGUI_DIR}/src/imgui_demo.cpp" "${IMGUI_DIR}/src/imgui_draw.cpp" "${IMGUI_DIR}/src/imgui_impl_glfw.cpp" 
    "${IMGUI_DIR}/src/imgui_impl_opengl3.cpp" "${IMGUI_DIR}/src/imgui_tables.cpp" "${IMGUI_DIR}/src/imgui_widgets.cpp"
)

#==== nlohmann/json ====
target_include_directories(${LIB_NAME} PUBLIC "${VENDOR_DIR}/nlohmann/json/include")

#==== FreeType ====
add_subdirectory("${VENDOR_DIR}/freetype" "vendor/freetype")
target_link_libraries(${LIB_NAME} freetype)

#==== spdlog ====
add_subdirectory("${VENDOR_DIR}/spdlog" "vendor/spdlog")
target_link_libraries(${LIB_NAME} spdlog::spdlog $<$<BOOL:${MINGW}>:ws2_32>)

#==== miniaudio ====
target_include_directories(${LIB_NAME} PUBLIC "${VENDOR_DIR}/miniaudio/include")